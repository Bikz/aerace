@compiler >= 6

contract ExchangeOracle =

    type query_type = string
    type answer_type = int
    type oracle_id = oracle(query_type, answer_type)
    type query_id = oracle_query(query_type, answer_type)

    record state = {
        owner : address,
        oracle : oracle_id,
        query_fee : int,
        ttl : int
    }

    event OracleRegistered(fee : int, ttl : int)
    event OracleResponded(query : query_id, value : int)
    event OracleExtended(ttl : int)

    entrypoint init(fee : int, ttl : int) =
        require(fee > 0, "ERR_FEE_ZERO")
        require(ttl > 0, "ERR_TTL_ZERO")
        let oracle = Oracle.register(Contract.address, fee, RelativeTTL(ttl))
        emit(OracleRegistered(fee, ttl))
        {
            owner = Call.caller,
            oracle = oracle,
            query_fee = fee,
            ttl = ttl
        }

    entrypoint get_oracle() : oracle_id = state.oracle

    entrypoint query_fee() : int = state.query_fee

    entrypoint ttl() : int = state.ttl

    stateful entrypoint respond(query : query_id, value : int) =
        require(Call.caller == state.owner, "ERR_NOT_OWNER")
        Oracle.respond(state.oracle, query, value)
        emit(OracleResponded(query, value))

    stateful entrypoint extend(ttl : int) =
        require(Call.caller == state.owner, "ERR_NOT_OWNER")
        require(ttl > 0, "ERR_TTL_ZERO")
        Oracle.extend(state.oracle, RelativeTTL(ttl))
        put(state{ ttl = ttl })
        emit(OracleExtended(ttl))
